/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <43 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 57 58 59 60 61 62 63 73 74 75 76 77 78 79 52 53 54 70 71 69 56 55 72>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 54 55 56 57 72 73 74>;
        };

        layerTap: layerTap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        TTLayer: TTLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "TTLAYER";
            bindings = <&tog>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            require-prior-idle-ms = <200>;
            flavor = "balanced";
        };

        hl_ps: hl_ps {
            compatible = "zmk,behavior-hold-tap";
            label = "HL_PS";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        dot {
            bindings = <&kp PERIOD>;
            key-positions = <37 42>;
            layers = <0 2 2>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <43 36>;
            layers = <0 2 2>;
        };

        LH-backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <36 37 38>;
            layers = <6>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <38 26>;
            layers = <0>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <37 25>;
            layers = <0>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <29 41>;
            layers = <0>;
        };

        k {
            bindings = <&kp K>;
            key-positions = <42 30>;
            layers = <0>;
        };

        op_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <48 36>;
            layers = <0>;
        };

        op_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <37 49>;
            layers = <0>;
        };

        op_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <50 38>;
            layers = <0>;
        };

        cl_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <41 59>;
            layers = <0>;
        };

        cl_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <60 42>;
            layers = <0>;
        };

        cl_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <43 61>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <37 36>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <37 38>;
            layers = <0>;
        };

        bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <41 42>;
            layers = <0>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <42 43>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&to 0       &none         &none            &none             &none                                                                                                                &none              &none              &none            &none   &none
&none       &none         &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT         &none                                                                                      &none  &kp C_MUTE         &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none   &none
&none       &TTLayer 5 4  &kp L            &kp D             &kp W              &none                                                                                      &none  &kp Y              &kp F              &kp U            &tog 3  &none
&none       &kp A         &hml LEFT_ALT S  &hml LCTRL E      &hml LEFT_SHIFT R  &none                                                                                      &none  &hmr LEFT_SHIFT N  &hmr LCTRL I       &hmr LEFT_ALT O  &kp T   &none
&none       &kp J         &kp G            &kp C             &kp P              &none  &kp TAB            &kp SPACE  &none  &none  &none              &none                &none  &kp H              &kp M              &kp V            &kp B   &none
&magic 8 0  &none         &none            &kp LEFT          &kp RIGHT                 &layerTap 1 SPACE  &none      &none  &none  &mt CAPS LEFT_GUI  &hl_ps 2 LEFT_SHIFT         &kp UP             &kp DOWN           &none            &none   &none
            >;
        };

        Numpad {
            bindings = <
&trans  &none   &none             &none          &none                                                                             &none               &none          &none             &none    &none
&none   &none   &none             &none          &none                     &none                                            &none  &none               &none          &none             &none    &none
&none   &none   &kp N7            &kp N8         &kp N9                    &none                                            &none  &kp F9              &kp F8         &kp F7            &kp F12  &none
&none   &kp N0  &hml LEFT_ALT N4  &hml LCTRL N5  &hml LEFT_SHIFT NUMBER_6  &none                                            &none  &hmr LEFT_SHIFT F6  &hmr LCTRL F5  &hmr LEFT_ALT F4  &kp F11  &none
&none   &none   &kp NUMBER_1      &kp N2         &kp N3                    &none  &none  &none  &none  &none  &none  &none  &none  &kp F3              &kp F2         &kp F1            &kp F10  &none
&none   &none   &none             &none          &none                            &none  &none  &none  &none  &none  &none         &none               &none          &none             &none    &none
            >;
        };

        Programing {
            bindings = <
&trans  &none       &none                     &none             &none                                                                                  &none                         &none                     &none                    &none             &none
&none   &none       &none                     &none             &none                  &none                                                    &none  &none                         &none                     &none                    &none             &none
&none   &none       &kp SEMICOLON             &kp AMPERSAND     &kp BACKSLASH          &none                                                    &none  &kp PLUS                      &kp ASTERISK              &kp COLON                &none             &none
&none   &kp DLLR    &hml LEFT_ALT UNDERSCORE  &hml LCTRL EQUAL  &hml LEFT_SHIFT CARET  &none                                                    &none  &hmr LEFT_SHIFT SINGLE_QUOTE  &hmr LCTRL DOUBLE_QUOTES  &hmr LEFT_ALT LESS_THAN  &kp GREATER_THAN  &none
&none   &kp DELETE  &kp GRAVE                 &kp PIPE          &kp EXCLAMATION        &none  &none  &none  &none  &none  &none  &none          &none  &kp MINUS                     &kp SLASH                 &kp TILDE                &kp QUESTION      &none
&none   &none       &none                     &none             &none                         &none  &none  &none  &none  &none  &kp BACKSPACE         &none                         &none                     &none                    &none             &none
            >;
        };

        Game {
            bindings = <
&trans  &none  &none  &none  &none                                                                       &none     &none         &none      &none  &none
&none   &none  &none  &none  &none  &none                                                         &none  &none     &none         &none      &none  &none
&none   &kp X  &kp M  &kp F  &kp G  &none                                                         &none  &none     &none         &none      &to 0  &none
&none   &kp R  &kp A  &kp W  &kp D  &none                                                         &none  &kp LEFT  &kp UP_ARROW  &kp RIGHT  &none  &none
&none   &kp T  &kp C  &kp S  &kp E  &none  &kp TAB    &none           &none  &none  &to 0  &none  &none  &none     &kp DOWN      &none      &none  &none
&trans  &none  &none  &none  &none         &kp SPACE  &kp LEFT_SHIFT  &none  &none  &none  &none         &none     &none         &none      &none  &none
            >;
        };

        Left_hand {
            bindings = <
&trans  &none           &none         &none  &none                                                                           &none  &none  &none  &none  &none
&none   &none           &none         &none  &none           &none                                                    &none  &none  &none  &none  &none  &none
&none   &to 0           &kp S         &kp A  &kp LEFT_SHIFT  &none                                                    &none  &none  &none  &none  &none  &none
&none   &kp LCTRL       &kp X         &kp C  &kp V           &none                                                    &none  &none  &none  &none  &none  &none
&none   &kp LEFT_SHIFT  &kp LEFT_ALT  &kp Z  &kp F           &none  &mt I TAB  &none      &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&trans  &none           &none         &none  &none                  &kp SPACE  &kp ENTER  &none  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        Left_arrows {
            bindings = <
&trans  &none           &none           &none         &none                                                                            &none  &none  &none  &none  &none
&none  &none           &none           &none         &none            &none                                                    &none  &none  &none  &none  &none  &none
&none  &to 0           &none           &none         &none            &none                                                    &none  &none  &none  &none  &none  &none
&none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none                                                    &none  &none  &none  &none  &none  &none
&none  &none           &none           &none         &none            &none  &kp TAB    &none      &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none           &none           &none         &none                   &kp SPACE  &kp ENTER  &none  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };
};
